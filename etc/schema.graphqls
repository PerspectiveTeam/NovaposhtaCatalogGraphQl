directive @doc(description: String="") on QUERY
    | MUTATION
    | FIELD
    | FRAGMENT_DEFINITION
    | FRAGMENT_SPREAD
    | INLINE_FRAGMENT
    | SCHEMA
    | SCALAR
    | OBJECT
    | FIELD_DEFINITION
    | ARGUMENT_DEFINITION
    | INTERFACE
    | UNION
    | ENUM
    | ENUM_VALUE
    | INPUT_OBJECT
    | INPUT_FIELD_DEFINITION
directive @resolver(class: String) on FIELD_DEFINITION
directive @cache(cacheable: Boolean) on FIELD_DEFINITION

type Mutation {
    novaposhtaWarehouseResponse
    (
        filter: WarehouseEntityInput
    )
    :novaposhtaWarehouseResponse @resolver(class:"Perspective\\NovaposhtaCatalogGraphQl\\Model\\Resolver\\NovaposhtaWarehouse"),
    novaposhtaCityResponse
    (
        filter: CityEntityInput,
    )
    :novaposhtaCityResponse @resolver( class: "Perspective\\NovaposhtaCatalogGraphQl\\Model\\Resolver\\NovaposhtaCity") @doc(description: "Query for getting Cities by Name from vault.") ,
    novaposhtaStreet
    (
        filter: StreetEntityInput,
    )
    :novaposhtaStreetResponse @resolver( class: "Perspective\\NovaposhtaCatalogGraphQl\\Model\\Resolver\\NovaposhtaStreet") @doc(description: "Query for getting Streets in the City by Ref from vault.") ,
}

type novaposhtaWarehouseResponse {
    items: [WarehouseEntity] @doc(description: "Return warehouses data list by given params"),
}

type WarehouseEntity {
    id: Int,
    site_key: Int,
    description_ua: String,
    description_ru: String,
    short_address_ua: String,
    short_address_ru: String,
    phone: String,
    type_of_warehouse: String,
    ref: String,
    number_in_city: Int,
    city_ref: Int,
    city_description_ua: String,
    city_description_ru: String,
    settlement_ref: String,
    settlement_description: String,
    settlement_area_description: String,
    settlement_region_description: String,
    settlement_type_description: String,
    longitude: String,
    latitude: String,
    post_finance: Int,
    bicycle_parking: Int,
    payment_access: Int,
    pos_terminal: Int,
    international_shipping: Int,
    total_max_weigh_tallowed: Int,
    place_max_weight_allowed: Int,
    reception: String,
    delivery: String,
    schedule: String,
    district_code: String,
    warehouse_status: String,
    category_of_warehouse: String,
}

type novaposhtaCityResponse {
    items: [CityEntity], @doc(description: "Gets all city data that ready to use in select input"),
}

type CityEntity {
    id: Int,
    descriptionua: String,
    descriptionru: String,
    ref: String,
    delivery_1: Boolean,
    delivery_2: Boolean,
    delivery_3: Boolean,
    delivery_4: Boolean,
    delivery_5: Boolean,
    delivery_6: Boolean,
    delivery_7: Boolean,
    area: String,
    settlement_type: String,
    is_branch: Boolean,
    prevent_entry_new_streets_user: String,
    conglomerates: String,
    city_id: Int,
    settlement_type_description_ru: Int,
    settlement_type_description_ua: Int,
}

input CityEntityInput {
    id: Int,
    descriptionua: String,
    descriptionru: String,
    ref: String,
    delivery_1: Boolean,
    delivery_2: Boolean,
    delivery_3: Boolean,
    delivery_4: Boolean,
    delivery_5: Boolean,
    delivery_6: Boolean,
    delivery_7: Boolean,
    area: String,
    settlement_type: String,
    is_branch: Boolean,
    prevent_entry_new_streets_user: String,
    conglomerates: String,
    city_id: Int,
    settlement_type_description_ru: Int,
    settlement_type_description_ua: Int,
}
input WarehouseEntityInput {
    id: Int,
    site_key: Int,
    description_ua: String,
    description_ru: String,
    short_address_ua: String,
    short_address_ru: String,
    phone: String,
    type_of_warehouse: String,
    ref: String,
    number_in_city: Int,
    city_ref: Int,
    city_description_ua: String,
    city_description_ru: String,
    settlement_ref: String,
    settlement_description: String,
    settlement_area_description: String,
    settlement_region_description: String,
    settlement_type_description: String,
    longitude: String,
    latitude: String,
    post_finance: Int,
    bicycle_parking: Int,
    payment_access: Int,
    pos_terminal: Int,
    international_shipping: Int,
    total_max_weigh_tallowed: Int,
    place_max_weight_allowed: Int,
    reception: String,
    delivery: String,
    schedule: String,
    district_code: String,
    warehouse_status: String,
    category_of_warehouse: String,
}
input StreetEntityInput {
    id: Int,
    description: String,
    ref: String,
    street_type_ref: String,
    street_type: String,
    city_ref: String,
}
type novaposhtaStreetResponse {
    items: [StreetEntity] @doc(description: "Return warehouses data list by given params"),
}
type StreetEntity {
    id: Int,
    description: String,
    ref: String,
    street_type_ref: String,
    street_type: String,
    city_ref: String,
}

